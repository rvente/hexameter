{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/te-x-net-ai","result":{"data":{"post":{"__typename":"MdxPost","slug":"/te-x-net-ai","title":"TeXNet.ai","date":"09.06.2020","tags":[{"name":"Projects","slug":"projects"},{"name":"AI","slug":"ai"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TeXNet.ai\",\n  \"date\": \"2020-06-09T00:00:00.000Z\",\n  \"tags\": [\"Projects\", \"AI\"],\n  \"toc\": true,\n  \"banner\": \"./texnet_logo.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", {\n    \"align\": \"center\"\n  }, \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/rvente/TeXNet.ai/master/assets/texnet_logo.png\",\n    \"boxshadow\": \"0 0 0 rgba(0,0,0,0)\",\n    \"width\": 400,\n    \"height\": \"auto\"\n  })), \"\\n\"), mdx(\"p\", null, \"Accurately transcribing mathematical expression into a markup representation\\ngives us hope for bringing new life to old mathematical texts or those for which\\nthe source code is unavailable.\"), mdx(\"p\", {\n    \"align\": \"center\"\n  }, \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/rvente/TeXNet.ai/master/assets/demo.png\"\n  })), \"\\n\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/untrix/im2latex\"\n  }), \"Sumeet Singh's work\"), \" laid the groundwork\\nfor this project. We ported the necessary portions of his model to Python3 and\\ncreated our own dataset of 170,000 examples generated from mined source code.\"), mdx(\"h2\", null, \"Demonstration Video\"), mdx(\"iframe\", {\n    className: \"ytEmbed\",\n    src: \"https://www.youtube.com/embed/ew6JG2c3M24\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }), mdx(\"h2\", null, \"Preprocessing Pipeline\"), mdx(\"p\", null, \"LaTeX is a very dynamic language so increasing the size of our data with\\nadditional examples would be prohibitively expensive. Instead we built a\\npipeline using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pandoc\"), \" to expand macros, aggregate, and normalize LaTeX source\\ncode samples from Cornell's Arxiv.\"), mdx(\"p\", {\n    \"align\": \"center\"\n  }, \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/rvente/TeXNet.ai/master/Final-Paper/assets/harvest.png\",\n    \"width\": 960,\n    \"height\": \"auto\"\n  })), \"\\n\"), mdx(\"h2\", null, \"Additional Resources\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/untrix/im2latex\"\n  }), \"Sumeet S. Singh's Project Site\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://drive.google.com/file/d/1mwUwoyhcz63mTd3s1v4Q8QoRBPBSzGEi/view?usp=sharing\"\n  }), \"Complete\\nDataset\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rvente/TeXNet.ai\"\n  }), \"Github Repository\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rvente/TeXNet.ai/blob/master/Final-Paper/Final_Paper.pdf\"\n  }), \"Research Paper\")), mdx(\"h2\", null, \"Team\"), mdx(\"undefined\", null, mdx(\"a\", {\n    \"href\": \"https://github.com/rvente\"\n  }, mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://avatars2.githubusercontent.com/u/21066644?v=4\",\n    \"title\": \"Blake Vente\",\n    \"width\": 120,\n    \"height\": 120\n  }))), mdx(\"a\", {\n    \"href\": \"https://github.com/taradactyl27\"\n  }, mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://avatars2.githubusercontent.com/u/31744974?v=4\",\n    \"title\": \"Alex\\nTaradachuk\",\n    \"width\": 120,\n    \"height\": 120\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Accurately transcribing mathematical expression into a markup representation\ngives us hope for bringing new life to old mathematical textsâ€¦","timeToRead":1,"banner":{"childImageSharp":{"resize":{"src":"/static/17bf99917ee62d57b838efdf996e1eea/73f08/texnet_logo.png"}}}}},"pageContext":{"slug":"/te-x-net-ai","formatString":"DD.MM.YYYY"}}}